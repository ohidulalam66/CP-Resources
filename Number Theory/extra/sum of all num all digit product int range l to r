#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<pii> vii;
typedef unordered_map<int,int> umii;
typedef unordered_map<ll,ll> umll;

#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define bs(v,val) binary_search(v.begin(),v.end(),val)
#define mod 1000000007
#define mod2 998244353 
#define ff first
#define ss second
#define fi(n) for(int i=0;i<n;i++)
#define fj(n) for(int j=0;j<n;j++)
#define all(v) v.begin(),v.end()
#define pb push_back
#define m_p make_pair
#define endl '\n'
#define sz(a) a.size()
#define checktime cerr << "Time : " << 1000 * ((double)clock()) / (double)CLOCKS_PER_SEC << "ms\n" 

struct custom_hash {    // anti-hack for unordered_map. To declare: unordered_map<long long, int, custom_hash> safe_map;
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        x ^= FIXED_RANDOM;
        return x ^ (x >> 16);
    }
};
ll power(ll x, ll y, ll p)
{  
    ll res = 1;
    x = x % p;  
    if (x == 0) return 0;
    while (y > 0){  
        if (y & 1)  res = (res*x) % p;  
        y = y>>1;
        x = (x*x) % p;  
    }  
    return res;  
}
ll modInverse(ll n, ll p)
{
    return power(n, p-2, p); 
}
ll modAdd(ll a, ll b, ll p)
{
    return (a+b)%p;
}
ll modSub(ll a, ll b, ll p)
{
    return (a%mod - b%mod + mod)%p;
}
ll modMul(ll a, ll b, ll p)
{
    return (a*b)%p;
}


// ********** CODE STARTS HERE ****************//

vector<ll>dp(19, 0);

int num_digits(ll n)
{
    int d = 0;
    while(n)
    {
        n/=10;
        d++;
    }
    return d;
}

ll func(ll n, bool b)
{
    if(n<10)
        return n*(n+1)/2;
    int num_dig = num_digits(n);
    
    ll res = (b ? dp[num_dig-1] : 0);

    string num = to_string(n);
    int dig = num[0]-'0';
    
    for(ll i = 1; i < dig; i++)
    {
        res += i*power(45ll, num_dig-1, mod);
        res %= mod;
    }
    num = num.substr(1);
    ll nn = 0;
    for(char c: num)
    {
        nn = nn*10 + (c-'0');
    }
    // cout << nn << ',' << res << '\n';
    // cout << nn;
    if(num[0] != '0')
    res += dig*func(nn, false);
    return res%mod;
}


void solve()
{
    ll l, r;
    cin >> l >> r;
    // cout << func(r,true)<<endl;
    // cout << func(l-1,true);
    cout << ((func(r, 1)-func(l-1, 1))%mod+mod)%mod << '\n';
    // ll n;
    // cin>>n;
    // int n = 109;
    // cout << func(n, true) << '\n';
    // cout << func(n+2, 1) << '\n';
}

int main()
{
	fastio;
    int T=1;
    cin>>T;
    
    for(int i = 1; i <= 18; i++)
    {
        ll res = 0;
        for(int j = 1; j <= i; j++){
            res += power(45ll, j, mod);
            res %= mod;    
        }
        dp[i] = res;
    }
	while(T--)
		solve();

        
    // checktime;
	return 0;
}
